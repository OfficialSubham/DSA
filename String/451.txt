In this problem i have to sort characters according to their frequency

Like i have given a string then i have to return a new string in such a way that the new string will be sorted in decreasing order
like the most repeated characters will stay at first;

TC -> O(N) + O(N * 2N);
SC -> O(N);

Optimal ->
  add the frequency to the hash map then push it to the vector and sort it in decreasing order then append it to the ans

TC -> O(N) + O(N) + O(nlogn) + O(N);
SC -> O(2N);

Code ->
  struct Comp {
    bool operator() (pair<int, char> a, pair<int, char> b) {
        if(a.first > b.first) return true;
        else if(a.first == b.first && a.second < b.second) return true;
        return false;
    }

};

    string frequencySort(string s) {
        unordered_map<char, int> charFreqMap;

        for(int i = 0; i < s.size(); i++) {
            charFreqMap[s[i]]++;
        }
        string ans = "";
        vector<pair<int, char>> freqVector;

        for(auto f : charFreqMap) {
            freqVector.push_back({f.second, f.first});
        }

        sort(freqVector.begin(), freqVector.end(), Comp());

        for(int i = 0; i < freqVector.size(); i++) {
            // string t = String()
            ans = ans.append(freqVector[i].first, freqVector[i].second);
        }

        return ans;

    }
};
