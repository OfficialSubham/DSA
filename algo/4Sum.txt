18. 4Sum

In this problem i have to find
all the unique indexes of four numbers in the given array
which sums up to form the target value

Brute ->
  use four nested loops
  then check weather the elements are equal to the target

TC -> O(N*N*N*N);
SC -> 2 * O(number of sets);

Better ->
  It is actually same as the three sum problem
  go with three nested loop
  start a hash inside the second loop
  add a element when k moves forward
  before moving check weather the remaining element from the target
  is already in the hash
  if so then just add it to the temp and sort it
  then add it to the ans set
  at last add it to a vector for returning

TC -> O(N*N*N* log (m))
log m for searching

SC -> O(N) O(quads) * 2

Optimal ->
  This one is as simple as the 3sum problem
  just take 4 pointers but move 2 as the previous problem

CODE for this one ->
  set<vector<int>> ansSet;
        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size(); i++) {
           if(i > 0 && nums[i] == nums[i - 1]) continue;
           for(int j = i + 1; j < nums.size(); j++) {
            if(j > 1 && nums[j] == nums[j-1] && i != j-1) continue;
            int k = j + 1;
            int l = nums.size() - 1;
            while (k < l) {
                long long sum = nums[i] + nums[j];
                sum += nums[k];
                sum += nums[l];
                if(sum == target) {
                    vector<int> temp = {nums[i], nums[j], nums[k], nums[l]};
                    ansSet.insert(temp);
                    k++;
                    l--;
                    while(k < l && nums[k] == nums[k-1]) k++;
                    while(l > k && nums[l] == nums[l + 1]) l--;
                }
                else if(sum > target) {
                    l--;
                }
                else if(sum < target) {
                    k++;
                }
            }
           }
        }
        vector<vector<int>> ans(ansSet.begin(), ansSet.end());
        return ans;

TC -> O(N log N) + O(N*N*N)
SC -> 2*O(quads)

